#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>

#pragma GCC optimize("Ofast")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx,avx,tune=native")
#pragma GCC optimize("unroll-loops")

using namespace std;

#define fi first
#define se second
#define pb push_back
#define show(x) cout<<#x<<" = "<<x<<endl;
#define v(T) vector<T>
#define vv(T) v(v(T))
typedef long long int ll;
typedef pair<int,int> P;
typedef vector<int> vi;
typedef vector<vi> vvi;
typedef vector<ll> vl;
typedef vector<P> vp;

int f( int x , int y )
{
    x = abs(x);
    y = abs(y);
    int t;
    if(x < y) {
      t = x;x = y; y = t;
    }

    if(x==1 && y == 0){
      return 3;
    }
    if(x==2 && y == 2){
      return 4;
    }

    int delta = x-y;
		if(y>delta){
  		return delta - 2*floor((delta-y)/3);
  	}
  	else{
  		return delta - 2*floor((delta-y)/4);
  	}
}

int main(){
  ios_base::sync_with_stdio(0);
int T = 304;
int cases[304][5] = {{1298, -410, -348, 563, -906}, {1370, 125, 887, 754, -86}, {789, 738, 32, -461, -354}, {962, 486, 182, -17, -438}, {1011, -166, 873, 235, 97}, {1048, -233, -16, 923, 12}, {446, 417, 506, 870, 420}, {839, -144, -280, -967, -112}, {884, -501, 582, 215, -924}, {542, 480, 599, -51, 340}, {799, 948, -419, 191, 393}, {355, -152, 929, 837, 695}, {839, -642, -297, -313, 345}, {1793, -226, -981, 282, 453}, {357, -17, -434, -825, -504}, {915, 559, 376, -284, 602}, {1123, -230, 77, -684, -987}, {1552, 59, -718, -845, 779}, {529, -404, 341, 229, 223}, {348, 592, -624, -98, -829}, {1086, -182, -289, 465, 346}, {919, -273, -664, 618, -855}, {652, -492, -454, -716, 529}, {2367, -228, -540, 978, 842}, {368, 863, -57, -175, 179}, {500, -837, -689, -452, -828}, {1047, -878, 110, 141, -485}, {1193, 357, -908, 743, -41}, {346, 252, -249, -892, -344}, {598, -862, -644, -860, 159}, {1419, 692, 539, 205, -721}, {1217, -21, -824, -916, 773}, {632, -732, -930, 61, -972}, {1332, -545, 185, 951, -159}, {569, 289, -568, 688, 549}, {376, -495, -269, -530, 272}, {481, 509, -644, 522, 407}, {371, -62, 803, 440, 882}, {516, 26, -294, -938, -82}, {543, -447, 463, 688, 685}, {296, 386, -768, -473, -994}, {1129, -19, 248, 517, -747}, {89, 880, -406, -82, -444}, {1238, 180, -454, -162, 852}, {750, -336, -928, 773, -785}, {1740, 487, 459, -179, -874}, {1102, 165, -278, -426, -923}, {910, 44, 200, 724, 605}, {514, 252, 710, -302, 335}, {768, 621, 962, 96, -913}, {253, -5, -792, 178, -655}, {1959, -133, -909, 416, 911}, {191, 691, -821, 571, -956}, {945, 331, -530, 721, 45}, {1260, -849, 102, -294, -639}, {1244, 321, -957, -671, -689}, {1483, -969, -814, -568, 659}, {1312, 311, -776, 862, 502}, {647, -423, 272, -216, -609}, {977, -434, -752, 547, -901}, {254, 453, 920, 614, 795}, {381, 995, -985, 59, -687}, {106, -866, 74, -866, 663}, {518, -708, -982, 892, -629}, {170, -442, 528, -576, 986}, {640, -108, -833, -885, -385}, {174, -572, 33, -567, 285}, {581, 718, 633, -711, 284}, {1072, 435, 931, -529, 93}, {1314, -183, 802, 873, -144}, {313, 962, -98, 742, 305}, {473, -897, 295, 107, 522}, {3206, 570, 993, -889, -759}, {65, 711, 336, 672, 294}, {214, -62, -628, -82, 791}, {370, 73, 361, 671, 697}, {725, -917, -600, 17, -997}, {272, 206, -865, -188, -731}, {1779, 607, 84, -578, 731}, {1831, 478, 612, -657, -929}, {1137, -262, 565, 840, -361}, {529, -261, 162, 233, 489}, {1254, 845, -108, -736, -992}, {772, -252, -35, -675, -419}, {695, 441, -908, -122, -491}, {1385, 731, 953, -105, -195}, {2327, 207, 971, -738, -773}, {702, -276, -307, -140, 746}, {1031, 790, -998, 998, 816}, {911, 831, 164, 709, -950}, {761, -749, -314, 184, -679}, {1469, 16, 456, 552, -544}, {908, -750, -597, 88, -502}, {563, -544, 645, -734, 189}, {1609, 100, 896, 643, -221}, {806, 153, -777, -953, -959}, {692, 564, -332, -90, 579}, {1762, -544, -704, -978, 896}, {1532, -857, -266, 661, 7}, {200, -501, 141, -431, 700}, {527, -710, -585, -980, -870}, {1913, -184, -818, 822, 614}, {1438, -720, -53, 203, 622}, {839, 292, 80, -486, 243}, {168, -398, 281, -994, 270}, {619, 385, 510, 714, -558}, {1152, -641, 123, 362, -592}, {792, 137, 230, -338, -362}, {678, -482, -492, 729, -91}, {781, -192, 60, -973, 481}, {1038, -62, 819, 694, 430}, {1818, -738, 530, 873, -967}, {964, -49, 594, 576, -225}, {870, -823, 287, 35, -836}, {708, 29, 664, -661, 219}, {346, 317, -779, 106, -323}, {568, 105, -643, -998, -862}, {436, 725, -636, 700, 215}, {1076, 185, -674, -623, -243}, {234, -411, -748, -19, -917}, {670, -443, -439, 403, -971}, {471, -229, 16, -530, -424}, {1407, -552, 86, 228, -865}, {1343, -273, 314, 607, 809}, {365, 499, -646, 260, -940}, {131, 137, -576, 596, -531}, {1390, -509, 545, -368, -806}, {1478, 550, 424, -823, 670}, {281, 194, -422, 118, 343}, {1023, 825, 277, 805, -977}, {1162, -961, -853, 931, -114}, {544, 93, -243, -386, -880}, {327, -184, -590, -455, -152}, {959, 454, 323, -454, 729}, {626, 279, -80, 52, 320}, {1525, 384, 619, -270, -495}, {750, -204, 629, 27, -399}, {808, -305, 531, 994, 374}, {534, -491, -507, -50, -245}, {257, -866, 709, -732, 428}, {1391, 795, -677, 483, 848}, {1417, 732, -641, -633, 948}, {1661, 900, -759, 355, 505}, {389, -200, -553, 465, -353}, {375, 13, 276, 750, 48}, {408, 596, -195, 189, -230}, {247, 336, -195, 176, -324}, {359, -392, -621, 154, -642}, {342, -540, -641, -540, 301}, {100, 355, 40, 396, 112}, {448, -218, -446, 142, 347}, {567, -714, 669, -920, 191}, {2185, 297, 718, -468, -783}, {563, -197, -507, -324, 435}, {522, -808, -184, -405, -596}, {1084, 291, 263, -971, 242}, {2205, -807, 300, 480, -759}, {793, -201, 373, -707, -29}, {543, -516, -640, -959, -740}, {697, -192, -901, -262, -160}, {1468, -656, -792, 471, 702}, {664, -463, 192, -669, 820}, {2150, 772, -994, 72, 687}, {294, 195, 584, 57, 425}, {2138, -356, -284, 975, 832}, {809, -281, -367, -869, -900}, {1920, -813, -743, 95, 376}, {278, 802, -28, 588, 303}, {986, 297, -188, 718, 390}, {341, 180, -844, -365, -920}, {838, 874, 216, 142, -813}, {2161, -961, 566, 967, -945}, {634, 178, 950, 426, -391}, {1515, 673, 99, -483, 481}, {2051, -922, -787, -201, 909}, {399, -352, -715, 476, -680}, {2204, -794, -408, 732, 696}, {833, -76, 193, 743, -996}, {668, -311, 83, -852, -876}, {2129, 999, 511, -490, -223}, {580, -302, -496, -198, 155}, {351, -913, -295, -631, -666}, {207, 342, 179, -515, -23}, {743, -599, 311, -949, 755}, {553, -38, -754, -618, -612}, {852, -689, 587, -388, -125}, {1525, 618, -950, 851, 492}, {279, -44, 54, 98, -168}, {873, 496, 22, 785, 663}, {549, -503, -534, 828, -196}, {605, 365, 47, 213, -592}, {1584, -288, 185, 970, 993}, {1079, 729, 417, -520, -265}, {189, 894, -780, 900, 232}, {1071, -260, -590, 218, 89}, {887, -318, 877, 81, -69}, {859, -554, -22, 570, 286}, {1415, -127, 573, -952, -69}, {481, 417, 490, 446, -767}, {703, 898, -649, -874, -931}, {1303, 950, 780, -507, 264}, {2125, -238, -989, -579, 988}, {917, 431, -369, 246, 752}, {243, -368, 299, -391, 544}, {679, 719, -664, 360, 321}, {965, 973, -765, 264, -369}, {1643, -13, -923, 841, -30}, {446, -537, 513, -827, 690}, {1437, 66, -916, 354, 474}, {2023, 359, 786, -515, -754}, {336, -118, 4, -305, -233}, {505, -451, 218, 0, -659}, {412, -536, -320, -585, -719}, {920, -781, 690, 30, -691}, {174, 201, -722, 372, -908}, {33, 339, -360, 314, -375}, {1090, 974, -344, -887, -450}, {817, -714, -956, -54, 450}, {433, -605, -5, -825, -657}, {527, -606, 676, -203, 994}, {310, -564, -152, -984, -183}, {142, -773, 835, -892, -200}, {457, -102, -882, -53, -98}, {2284, -940, -839, 393, 780}, {171, -293, -588, -869, -463}, {1460, -193, 174, 529, -741}, {954, -423, -353, 11, 486}, {1292, 161, 760, -575, -498}, {527, 486, -136, 722, 820}, {463, 70, 524, -467, 311}, {1837, 974, 769, -577, -806}, {2417, 437, 796, -922, -833}, {361, -513, -130, -849, -18}, {472, -798, -19, -385, -794}, {244, 927, 6, 811, 366}, {1260, -81, -142, -930, 518}, {2194, 676, -770, -240, 747}, {1041, 552, -25, 905, -804}, {471, -851, -679, -799, 841}, {853, 107, 911, 816, -720}, {837, -320, 812, 235, -528}, {707, -464, 531, -84, -24}, {913, -499, 263, 267, -851}, {2392, 907, 981, -619, -165}, {93, 644, -133, 436, -98}, {1792, 910, 575, -470, -388}, {599, -510, -609, 572, -496}, {517, -390, -248, -702, -527}, {377, -166, -495, 158, -215}, {1348, -304, -257, 349, 696}, {809, 607, 908, 396, 271}, {918, 883, -31, 430, -500}, {1413, -65, -189, -597, 800}, {1123, 420, -804, -957, -472}, {270, -532, 77, -408, -354}, {1149, 436, 435, 656, -966}, {2286, -733, 782, 433, -714}, {202, 510, 697, 404, 820}, {307, -813, -385, -101, -528}, {1666, 935, 731, -832, -775}, {1735, -55, 987, 387, -306}, {1941, 868, -279, -667, 201}, {1715, -458, -478, -995, 908}, {531, 442, 766, -80, -63}, {1356, 169, -464, -758, 168}, {801, 579, 717, 104, -670}, {875, -947, 216, -116, -212}, {1459, 989, -755, -668, -802}, {816, 543, -888, -913, -627}, {234, 945, 452, 573, 279}, {1370, -174, -777, 2, 821}, {218, 349, -392, 636, -427}, {2293, 654, -950, -880, 859}, {794, 790, -757, 310, 418}, {1010, 302, 283, -314, -149}, {624, 862, 2, 794, -759}, {360, 260, 873, 240, 479}, {56, -165, -209, -204, -101}, {1961, -754, 235, 943, -731}, {611, 298, -506, 972, -719}, {480, 905, 42, -593, 139}, {607, -806, 339, -132, 888}, {1105, 683, 572, -58, -574}, {926, -45, -920, -557, -504}, {480, -737, -624, 96, -169}, {826, 174, -633, -600, 492}, {1614, 287, 920, 640, -746}, {1134, -763, 93, 598, -309}, {599, 794, -788, -884, -704}, {510, 957, -160, -618, -374}, {1651, -618, -706, 314, 435}, {372, -652, 134, 308, 210}, {138, -962, 297, -870, 24}, {774, 827, -229, -712, -822}, {684, 716, -303, 159, -84}, {632, 590, 918, 620, -32}, {1651, -648, -391, 839, 852}, {417, -635, 779, -92, 877}, {1936, 979, 854, -460, -674}, {346, 735, 986, 893, -750}, {216, -878, -163, -854, 705}, {687, -265, -146, 488, 130}, {480, -759, -874, -612, -526}, {1038, 185, 360, 938, -746}};
  queue<pair<int,int>> q;
  map<pair<int,int>, bool> used;
  for(int i = 0;i < T;i++){
    int x = cases[i][1];
    int y = cases[i][2];
    int a = cases[i][3];
    int b = cases[i][4];
    int k = cases[i][0];
    int min_step = f(a - x,b - y);
    if(min_step > k){ 
      cout << "NO" << endl;
      continue;
    }else if((k - min_step) % 2 == 0){
      cout << "YES" << endl;
      continue;
    }
    cout << "NO" << endl;
  }
}